Google API Demo
Go, AppEngine, Cloud Endpoints, Google Cloud Messaging

Paul Carleton
BS/MS Computer Science 2013
pcarleton@google.com

* Links

Code and link to slides available at:

.link https://github.com/pcarleton/wustl-hack-2014

* Goals
- Achieve simple functionality
- Use several Google API's
- Provide starting point or point of reference

* Non-Goals

- Be comprehensive
- Demonstrate best practices

* Roadmap

1. Introduce APIs
2. Initial server - Echo
3. Android App
3. Extend Server - Send messages
4. Demo
5. Q&A


* Roadmap

*1.*Introduce*APIs*
2. Initial server - Echo
3. Android App
3. Extend Server - Send messages
4. Demo
5. Q&A

* Overview

.image apidemo/overview.png 500 _
.caption [[https://github.com/pcarleton/wustl-hack-2014]]


* AppEngine

.image apidemo/appengine_logo.png 500 _
.caption [[https://developers.google.com/appengine/]]

* Go

.image apidemo/gopherbw.png 500 _
.caption [[http://tour.golang.org][tour.golang.org]]

* AppEngine + Go

.image apidemo/aegopher.jpg 500 _
.caption [[https://developers.google.com/appengine/docs/go/gettingstarted/introduction][Hello world tutorial]]


* Cloud Endpoints

.image apidemo/cloud_endpoints_logo.png 500 _
.caption [[https://developers.google.com/appengine/docs/java/endpoints/]]


* Google Cloud Messaging

.image apidemo/gcm.png 250 _
.caption [[https://developer.android.com/google/gcm/index.html]]


* Roadmap

1. Introduce APIs
*2.*Initial*server*-*Echo*
3. Android App
3. Extend Server - Send messages
4. Demo
5. Q&A


* Server

- Message
- Service with Method
- Register as a handler
- Configure and deploy

.link https://github.com/pcarleton/wustl-hack-2014

* Server - Message

  // Message just wraps a string in a struct.  We could add other fields here if we wanted.
  type Message struct {
    Content string
  }


* Server - Service

  // Empty struct to attach our endpoint methods to.
  type MessengerService struct {
  }

  // Echo repeats the message you send back to you.
  func (*MessengerService) Echo(r *http.Request, m *Message, resp *Message) error {
    resp.Content = "Recieved message: " + m.Content
    return nil
  }


* Service in Action

.play apidemo/service-short.go /func main/,

* Server - Register

  package messenger
  import (...)

  func registerCloudEndpoints() {
    // Create instance of our service
    service := &MessengerService{}

    // Register our service as an endpoint service
    api, err := endpoints.RegisterService(service, "messenger", "v1", "Messenger API", true)
    if err != nil {
       panic(err.Error())
    }

    // Register Echo method
    info := api.MethodByName("Echo").Info()
    info.Name, info.HttpMethod, info.Path, info.Desc =
    	       "Echo", "POST", "Echo", "Echoes your message."
    // Start handling requests
    endpoints.HandleHttp()
  }

  func init() {
    registerCloudEndpoints()
  }

* Server - Configure

app.yaml

 application: wustl-hack-2014
 version: auto
 runtime: go
 api_version: go1
 handlers:

 # Cloud endpoints
 - url: /_ah/spi/.*
   script: _go_app

Use `goapp`serve` to run locally

* Server - Deploy

Create an AppEngine App

.link http://cloud.google.com/console

.image apidemo/console.png 400 _


* Server - Deploy

 // Deploy to server
 goapp deploy

Check it out!

.link https://wustl-hack-2014.appspot.com/_ah/api/explorer

* Roadmap

1. Introduce APIs
2. Initial server - Echo
*3.*Android*App*
3. Extend Server - Send messages
4. Demo
5. Q&A

* Android Client

1. Start with vanilla Android Studio Setup
2. Register with GCM and save Registration ID
3. Listen for GCM Messages  
4. Make change using message

* Brace yourself, ugly Java ahead

* Android Client - Register with GCM

    // registerWithGCM contacts the GCM server and logs the ID it receives.
    public void registerWithGCM(){
        new AsyncTask<Void, Void, String>() {
            @Override
            protected String doInBackground(Void... params) {
                String msg = "";
                try {
                    if (gcm == null) {
                        gcm = GoogleCloudMessaging.getInstance(getApplicationContext());
                    }
                    String regid = gcm.register(PROJECT_NUMBER);
                    // In reality, we would want to send this to the server so it can reach us.
                    // For the sake of simplicity for this demo, we'll just copy and paste it from
                    // the logs.
                    msg = "Device registered, registration ID=" + regid;
                    Log.i("GCM", msg);
                } catch (IOException ex) {
                    msg = "Error :" + ex.getMessage();
                }
                return msg;
            }
        }.execute(null, null, null);
    }


* Android Client - Listen

 public class GcmBroadcastReceiver extends WakefulBroadcastReceiver {
     @Override
     public void onReceive(Context context, Intent intent) {
         Bundle extras = intent.getExtras();
         Intent RTReturn = new Intent(MainActivity.RECEIVE_MESSAGE);
         RTReturn.putExtra("message", extras.getString("message"));
         LocalBroadcastManager.getInstance(context).sendBroadcast(RTReturn);
         setResultCode(Activity.RESULT_OK);
     }
 }

AndroidManifest.xml

    <receiver
        android:name=".GcmBroadcastReceiver"
        android:permission="com.google.android.c2dm.permission.SEND" >
        <intent-filter>
            <action android:name="com.google.android.c2dm.intent.RECEIVE" />
            <category android:name="com.google.apps.examples.roshambo.android.gcm" />
        </intent-filter>
    </receiver>

* Android Client - Use the data

    // Set up a broadcast receiver
    private BroadcastReceiver bReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            if(intent.getAction().equals(RECEIVE_MESSAGE)) {
                String message = intent.getStringExtra("message");
                messageView.setText(message);
            }
        }
    };


* Android Client - Putting it together

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        messageView = (TextView) findViewById(R.id.messageView);

        // Tell GCM we want to receive messages.
        registerWithGCM();

        // Tell our local broadcast manager we want to receive messages and handle
        // them with our 'bReceiver'.
        LocalBroadcastManager bManager = LocalBroadcastManager.getInstance(this);
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(RECEIVE_MESSAGE);
        bManager.registerReceiver(bReceiver, intentFilter);
    }

* Android Client is ready to receive messages

Now we have to send some.

* Roadmap

1. Introduce APIs
2. Initial server - Echo
3. Android App
*3.*Extend*Server*-*Send*messages*
4. Demo
5. Q&A


* Back to the server...

* Enable GCM

.image apidemo/enablegcm.png 400 _


* Get a Server API Key

.image apidemo/apikey.png 500 _


* AppEngine - Some new structs

.code apidemo/service.go /type Message /,/^}/

.code apidemo/service.go /type GCMMsg/,/^}/

* AppEngine - Send Method

.code apidemo/service.go /func .*Send/,/^}/

* AppEngine - New registerCloudEndpoints

.code apidemo/service.go /func register/,/^}/


* Try it out!

.link https://wustl-hack-2014.appspot.com/_ah/api/explorer

RegID:

  APA91bGcNDhRk_S2TcdU-iuKF5E7r1RWXm76if-VLM3WwtG8hBMflLYbHnVWomjcYxosSBxo7t1ILssdqoVZa_5RbHPbuR4hA3Yv20CVVCm4EOQGKxSaJGwhL8W6-AsXBjy3jr_UGTTG2mL0bsKwnOhXpoeVG_gaycZmLuMLlaJmCW7TPeUgPEE


* Improvements/Extensions

.image apidemo/overview.png


* Improvements/Extensions

- No more copy and paste.

- Talk to Endpoints from Android

- Broadcast to multiple devices

- Implement real browser client

- Make methods do something useful

- iOS client

- Could even rewrite server in another language (Python, Java, PHP)

* Q&A

* Appendix

* Appendix - Server Functions

.code apidemo/service.go /func createRequest/,/^}/

* Appendix - Server Functions

.code apidemo/service.go /func encodeMsg/,/^}/


.code apidemo/service.go /func createGCMMsg/,/^}/

* Appendix - AppEngine vs. Heroku

- Tough call, similar offerings

- Heroku Better integration with relational DB

- AppEngine, better integration with the rest of Google